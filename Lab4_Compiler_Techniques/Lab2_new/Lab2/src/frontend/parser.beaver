// package the generated Java class lives in; no need to change this
%package "parser";

// name of the generated Java class; no need to change this
%class "Parser";

// no need to change this either
%embed {:
	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}
:};

// the list of all terminals; no need to change this
%terminals MODULE, INT, VOID, IF, ELSE, WHILE, RETURN, BREAK, BOOLEAN, PUBLIC, TRUE, FALSE,
           INT_LITERAL, STRING_LITERAL, ID, TYPE, IMPORT,
           PLUS, MINUS, TIMES, DIV, MOD, EQEQ, NEQ, LEQ, GEQ, LT, GT,
           LBRACKET, RPAREN, COMMA, RCURLY, LCURLY, SEMICOLON, RBRACKET, LPAREN, EQL;

// declaration of start symbol; no need to change this
%goal Module;

// temporary declaration, you can remove this once you have written all other rules
// %goal Dummy;

/* TODO: Flesh out the rule for Module, and add rules for other nonterminals. Here is an example
         of a rule you may want to add:

   Accessibility = PUBLIC
		  |
		  ;
  */

Module = MODULE ID LCURLY Imports Declarations RCURLY;

Imports = Import Imports
	|
	;

Import = IMPORT ID SEMICOLON;

Declarations = Declaration Declarations
	|
	;

Declaration = FunctionDeclaration
	| FieldDeclaration
	| TypeDeclaration
	;

FunctionDeclaration = AccSpecifier TypeName ID LPAREN ParameterList RPAREN LCURLY StatementList RCURLY;

FieldDeclaration = AccSpecifier TypeName ID SEMICOLON;

TypeDeclaration = AccSpecifier TYPE ID EQL STRING_LITERAL SEMICOLON;

AccSpecifier = PUBLIC
	|
	;

TypeName = PrimitiveType
	| ArrayType
	| ID
	;

PrimitiveType = VOID
	| BOOLEAN
	| INT
	;

// extend as in TUT
//	ArrayType = TypeName LBRACKET RBRACKET;

ArrayType = PrimitiveType LBRACKET RBRACKET
	| ArrayType LBRACKET RBRACKET
	| ID LBRACKET RBRACKET
	;


ParameterList = Parameters
	|
	;

Parameters = Parameter COMMA Parameters
	| Parameter
	;

Parameter = TypeName ID;

StatementList = Statement StatementList
		|
		;

Statement = TypeName ID SEMICOLON
	| LCURLY StatementList RCURLY
	| IF LPAREN Expression RPAREN Statement
	| IF LPAREN Expression RPAREN Statement ELSE Statement
	| WHILE LPAREN Expression RPAREN Statement
	| BREAK SEMICOLON
	| RETURN Expression SEMICOLON
	| RETURN SEMICOLON
	| Expression SEMICOLON
	;

Expression = Assignment
	| RightHandExp
	;

Assignment = LeftHandExp EQL Expression;

LeftHandExp = ID
	| ArrayAcc
	;

ArrayAcc = ID LBRACKET Expression RBRACKET
	| ArrayAccTail;
	
ArrayAccTail = ArrayAcc LBRACKET Expression RBRACKET;	

RightHandExp = ArithmeticExp
	| ArithmeticExp ComparisonOp ArithmeticExp
	;

ComparisonOp = EQEQ
	| NEQ
	| LT
	| LEQ
	| GT
	| GEQ
	;

ArithmeticExp = ArithmeticExp AdditiveOp Term
	| Term
	;

AdditiveOp = PLUS
	| MINUS
	;

Term = Term MultiplicativeOp Factor
	| Factor
	;

MultiplicativeOp = TIMES
	| DIV
	| MOD
	;

Factor = MINUS Factor
	| PrimaryExp
	;

PrimaryExp = LeftHandExp
	| ID LPAREN ExpressionList RPAREN
 	| LBRACKET Expressions RBRACKET
	| STRING_LITERAL
	| INT_LITERAL
	| TRUE
	| FALSE
	| LPAREN Expression RPAREN
	;

ExpressionList = Expressions
	|
	;

Expressions = Expression COMMA Expressions
	| Expression
	;

/**/

/* Dummy rule to make the lexer compile. Remove this once you have written all other rules.
Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT
           PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL;
*/
